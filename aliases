# Quick command to quit the terminal
alias q="exit"
# And to clear the console
alias c="clear"
alias cls="clear"

# Improved ll
alias ll='ls -alF'

# Copy with Rsync
rscp='rsync -ax --inplace --sparse --no-whole-file --protect-args'

# Copy the current time as a UNIX timestamp
alias unixtime="date +%s | tee >(cb copy)"

# Don't forget that I use scc now
cloc()
{
    echo "Use scc instead you dummy"
}

# Quick command to update my dot files (cd into ~/.dotfiles and git pull)
dotfiles-update() {
    CURR_DIR=$(pwd)
    cd ~/.dotfiles
    git pull
    echo \n\n
    cd $CURR_DIR
    source ~/.zshrc
}

# Quickly kill a process that is using a port
# eg: portkill 8080
portkill()
{
    kill $(lsof -t -i:$1)
}

# Add Gradle to path
if [ -d "/opt/gradle/gradle-7.3/bin" ] ; then
    PATH="/opt/gradle/gradle-7.3/bin:$PATH"
    GRADLE_HOME="/opt/gradle/gradle-7.3/bin"
fi

if [[ -x /usr/bin/dolphin ]]; then
    dolphin () {
        /usr/bin/dolphin "$@" > /dev/null 2> /dev/null &!
    }
fi

if [[ -x /usr/bin/nautilus ]]; then
    nautilus() {
        /usr/bin/nautilus "$@" > /dev/null 2> /dev/null &!
    }
fi

# Remarkable stuff
export RMVIEW_CONF="~/.dotfiles/rmview/config.json"

# Quick SSH into my server
alias ursula="ssh migue@ssh.miguelguthridge.com"

# UNSW zID
export ZID="z5312085"

# Environment variables pointing to CSE Servers
export CSE="${ZID}@login.cse.unsw.edu.au"
export CSE1010="cs1010@login.cse.unsw.edu.au"

# Quick alias for SSH-ing into CSE
alias cse="ssh $CSE"
alias cs1010="ssh $CSE1010"

# Quick function for grabbing files from CSE
#
# cse-get /path/to/my/file.txt
# Download to ./file.txt
#
# cse-get /path/to/my/file.txt /path/to/save/in.txt
# Download to in.txt
#
# Note that using the ~ character won't work correctly on the CSE end
cse-get()
{
    if [ $# -eq 1 ]; then
        echo "CSE: Downloading $1 -> ${1##*/}"
        rsync "$CSE":"$1" ${1##*/}
    elif [ $# -eq 2 ]; then
        echo "CSE: Downloading $1 -> $2"
        rsync "$CSE":"$1" $2
    else
        echo "Usage: cse-get from_file [to_file]"
    fi
}

# Quick function for sending files to CSE
#
# cse-set /path/to/my/file.txt
# Upload to your CSE home directory as file.txt
#
# cse-set /path/to/my/file.txt /path/to/save/in.txt
# Upload to CSE systems under the given path
#
# Note that using the ~ character won't work correctly on the CSE end
cse-set()
{
    if [ $# -eq 1 ]; then
        echo "CSE: Uploading $1 -> ${1##*/}"
        rsync ${1##*/} "${CSE}:/home/${ZID}/${1}"
    elif [ $# -eq 2 ]; then
        echo "CSE: Uploading $1 -> $2"
        rsync $1 "$CSE":"$2"
    else
        echo "Usage: cse-set from_file [to_file]"
    fi
}
cse1010-set()
{
    if [ $# -eq 1 ]; then
        echo "CSE: Uploading $1 -> ${1##*/}"
        rsync ${1##*/} "${CSE1010}:/home/cs1010/${1}"
    elif [ $# -eq 2 ]; then
        echo "CSE: Uploading $1 -> $2"
        rsync $1 "$CSE1010":"$2"
    else
        echo "Usage: cse-set from_file [to_file]"
    fi
}

# Add function for combining mkdir and cd
mkcdir ()
{
    mkdir -p -- "$1" &&
    cd -P -- "$1"
}

# Add function for combining cd and ls
cdl ()
{
    cd -P -- "$1"
    ls
}


# VC Compiler
alias vc="java -jar ~/Tweaks/VC.jar"
alias vcc="java -jar /home/migue/.local/bin/vcc.jar"

# Gitignore grabber
gitignore ()
{
    curl -s --fail "https://raw.githubusercontent.com/github/gitignore/main/$1.gitignore" -o .gitignore
    if [ $? -eq 0 ]; then
        return 0
    else
        echo "Lookup failed, maybe check capitalisation?"
        return 1
    fi
}

# Restart network on Yzma
alias netrestart="sudo ifconfig wlp0s20f3 down && sudo ifconfig wlp0s20f3 up"

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

#
###############################################################################

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    if ! IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)); then
      local ret=$?
      IFS="$si"
      return $ret
    fi
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    if ! IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)); then

      local ret=$?
      IFS="$si"
      return $ret
    fi
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###

# Cargo completion?
if [[ -x "$HOME/.cargo/env" ]]; then
  . "$HOME/.cargo/env"
fi
