# Quick command to quit the terminal
alias q="exit 0"
# And to clear the console
alias c="clear"
alias cls="clear"

# Improved ll
alias ll='ls -alF'

# Copy with Rsync
rscp='rsync -ax --inplace --sparse --no-whole-file --protect-args'

# Copy the current time as a UNIX timestamp
alias unixtime="date +%s | tee >(cb copy)"

# whence alias
# Tell me what something is
if [ -n "$BASH" ]; then
    alias what="type -a"
elif [ -n "$ZSH_NAME" ]; then
    alias what="whence -fva"
else
    echo "Not running in Bash or ZSH, no definition for 'what'"
fi

# Don't forget that I use scc now
cloc()
{
    echo "Use scc instead you dummy"
}

# Quick command to update my dot files (cd into ~/.dotfiles and git pull)
dotfiles-update() {
    CURR_DIR=$(pwd)
    cd ~/.dotfiles
    git pull
    cd $CURR_DIR
    # Two empty lines -- there is no better way to do this that also works in
    # bash
    echo
    echo
    # Now reload the config
    if [ -n "$BASH" ]; then
        source ~/.bashrc
    elif [ -n "$ZSH_NAME" ]; then
        source ~/.zshrc
    else
        echo "Not running in Bash or ZSH, no re-source of configs"
    fi
}

# Download and install the latest version of DCC from the COMP1511 GitHub
dcc-update() {
    sudo curl -L https://github.com/COMP1511UNSW/dcc/releases/latest/download/dcc -o /usr/local/bin/dcc \
    && sudo chmod o+rx /usr/local/bin/dcc
}

# Quickly kill a process that is using a port
# eg: portkill 8080
portkill()
{
    if [[ $1 == "-f" ]]; then
        kill -9 $(lsof -t -i:$2)
    else
        kill $(lsof -t -i:$1)
    fi
}

# The _port_in_use and find_port functions were yoinked from some code that
# https://github.com/arctic-hen7 wrote

# Check whether a port is in use
_port_in_use() {
    local port=$1
    netstat -tuln | grep ":$port" > /dev/null
}

# Find an open port
find_port() {
    # Start checking from port 5001
    port=5001

    while port_in_use "$port"; do
        ((port++))
    done

    # Print the first available port
    echo "$port"
}

# Add Gradle to path
if [ -d "/opt/gradle/gradle-7.3/bin" ] ; then
    PATH="/opt/gradle/gradle-7.3/bin:$PATH"
    GRADLE_HOME="/opt/gradle/gradle-7.3/bin"
fi

if [[ -x /usr/bin/dolphin ]]; then
    dolphin () {
        /usr/bin/dolphin "$@" > /dev/null 2> /dev/null &!
    }
fi

if [[ -x /usr/bin/nautilus ]]; then
    nautilus() {
        /usr/bin/nautilus "$@" > /dev/null 2> /dev/null &!
    }
fi

# Remarkable stuff
export RMVIEW_CONF="~/.dotfiles/rmview/config.json"

# Quick SSH into my server
alias ursula="ssh migue@ssh.miguelguthridge.com"

# UNSW zID
export ZID="z5312085"

# Environment variables pointing to CSE Servers
export CSE="${ZID}@login.cse.unsw.edu.au"
export CS1010="cs1010@nw-k17-login1.cse.unsw.edu.au"

# Quick alias for SSH-ing into CSE
alias cse="ssh $CSE"
alias cs1010="ssh $CS1010"

# Run Stack through Bash to help work around https://github.com/commercialhaskell/stack/issues/6134
# stack() {
#     bash -c "stack $@"
# }

# Quick function for grabbing files from CSE
#
# cse-get /path/to/my/file.txt
# Download to ./file.txt
#
# cse-get /path/to/my/file.txt /path/to/save/in.txt
# Download to in.txt
#
# Note that using the ~ character won't work correctly on the CSE end
cse-get()
{
    if [ $# -eq 1 ]; then
        echo "CSE: Downloading $1 -> ${1##*/}"
        rsync "$CSE":"$1" ${1##*/}
    elif [ $# -eq 2 ]; then
        echo "CSE: Downloading $1 -> $2"
        rsync "$CSE":"$1" $2
    else
        echo "Usage: cse-get from_file [to_file]"
    fi
}
cs1010-get()
{
    if [ $# -eq 1 ]; then
        echo "CSE: Downloading $1 -> ${1##*/}"
        rsync "$CS1010":"$1" ${1##*/}
    elif [ $# -eq 2 ]; then
        echo "CSE: Downloading $1 -> $2"
        rsync "$CS1010":"$1" $2
    else
        echo "Usage: cs1010-get from_file [to_file]"
    fi
}

# Quick function for sending files to CSE
#
# cse-set /path/to/my/file.txt
# Upload to your CSE home directory as file.txt
#
# cse-set /path/to/my/file.txt /path/to/save/in.txt
# Upload to CSE systems under the given path
#
# Note that using the ~ character won't work correctly on the CSE end
cse-set()
{
    if [ $# -eq 1 ]; then
        echo "CSE: Uploading $1 -> ${1##*/}"
        rsync ${1##*/} "${CSE}:/home/${ZID}/${1}"
    elif [ $# -eq 2 ]; then
        echo "CSE: Uploading $1 -> $2"
        rsync $1 "$CSE":"$2"
    else
        echo "Usage: cse-set from_file [to_file]"
    fi
}
cs1010-set()
{
    if [ $# -eq 1 ]; then
        echo "CSE: Uploading $1 -> ${1##*/}"
        rsync ${1##*/} "${CS1010}:/home/cs1010/${1}"
    elif [ $# -eq 2 ]; then
        echo "CSE: Uploading $1 -> $2"
        rsync $1 "$CS1010":"$2"
    else
        echo "Usage: cs1010-set from_file [to_file]"
    fi
}

# Quick counting of zIDs for help session resourcing
# Usage:
# * zid-counter  # count from stdin
# * zid-counter [filename]  # count from file
zid-counter () {
    if [ $# -eq 1 ]; then
        contents=$(cat $1)
    else
        contents=$(cat)
        # Extra newline to avoid yucky output
        echo
    fi
    # Convert to lowercase
    contents=$(echo "$contents" | awk '{print tolower($0)}')
    # Total requests
    number=$(echo "$contents" | wc -l)
    # Total unique requests
    unique=$(echo "$contents" | sort | uniq | wc -l)
    echo "$number requests, _ resolved, $unique unique"
}

# Find a student based on their name within a course, on CSE systems
#
# Note: this may misbehave due to term numbers, Nick suggests using
# ${COURSE}_Student${TERM} instead, but that won't be clean until I can get the
# current UNSW term as an environment variable.
find-student () {
    if [ $# -eq 2 ]; then
        members "${1}_Student" | grep "${2}"
    else
        echo "Usage: find-student [course_code] [name]"
    fi
}

# Activate my COMP1010 virtual environment
1010-venv ()
{
    source ~/Source/COMP/1010/.1010-venv/bin/activate
}

# Add function for combining mkdir and cd
mkcdir ()
{
    mkdir -p -- "$1" &&
    cd -P -- "$1"
}

# Add function for combining cd and ls
cdl ()
{
    cd -P -- "$1"
    ls
}


# VC Compiler
alias vc="java -jar ~/Tweaks/VC.jar"
alias vcc="java -jar /home/migue/.local/bin/vcc.jar"

# Gitignore grabber
gitignore ()
{
    curl -s --fail "https://raw.githubusercontent.com/github/gitignore/main/$1.gitignore" -o .gitignore
    if [ $? -eq 0 ]; then
        return 0
    else
        echo "Lookup failed, maybe check capitalisation?"
        return 1
    fi
}

# Command to merge PDFs
# Usage: `pdfmerge out.pdf in1.pdf in2.pdf`
# Source: comments of https://stackoverflow.com/a/19358402/6335363
pdfmerge() {
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -sOutputFile=$@ ;
}

# Alias for clipboard if installed through flatpak
if command -v flatpak &> /dev/null
then
    # Flatpak exists
    if flatpak list | grep app.getclipboard.Clipboard > /dev/null
    then
        alias cb="flatpak run app.getclipboard.Clipboard"
    fi
fi


# Restart network on Yzma
alias netrestart="sudo ifconfig wlp0s20f3 down && sudo ifconfig wlp0s20f3 up"

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Other nonsense that I don't care about
###############################################################################

# Upgrading node and npm to 1531 defaults on CSE systems
if [[ -x "~cs1531/setup/setup.sh" ]]; then
    source ~cs1531/setup/setup.sh
fi

# ###-begin-npm-completion-###
# #
# # npm command completion script
# #
# # Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# # Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
# #
#
# if type complete &>/dev/null; then
#   _npm_completion () {
#     local words cword
#     if type _get_comp_words_by_ref &>/dev/null; then
#       _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
#     else
#       cword="$COMP_CWORD"
#       words=("${COMP_WORDS[@]}")
#     fi
#
#     local si="$IFS"
#     if ! IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
#                            COMP_LINE="$COMP_LINE" \
#                            COMP_POINT="$COMP_POINT" \
#                            npm completion -- "${words[@]}" \
#                            2>/dev/null)); then
#       local ret=$?
#       IFS="$si"
#       return $ret
#     fi
#     IFS="$si"
#     if type __ltrim_colon_completions &>/dev/null; then
#       __ltrim_colon_completions "${words[cword]}"
#     fi
#   }
#   complete -o default -F _npm_completion npm
# elif type compdef &>/dev/null; then
#   _npm_completion() {
#     local si=$IFS
#     compadd -- $(COMP_CWORD=$((CURRENT-1)) \
#                  COMP_LINE=$BUFFER \
#                  COMP_POINT=0 \
#                  npm completion -- "${words[@]}" \
#                  2>/dev/null)
#     IFS=$si
#   }
#   compdef _npm_completion npm
# elif type compctl &>/dev/null; then
#   _npm_completion () {
#     local cword line point words si
#     read -Ac words
#     read -cn cword
#     let cword-=1
#     read -l line
#     read -ln point
#     si="$IFS"
#     if ! IFS=$'\n' reply=($(COMP_CWORD="$cword" \
#                        COMP_LINE="$line" \
#                        COMP_POINT="$point" \
#                        npm completion -- "${words[@]}" \
#                        2>/dev/null)); then
#
#       local ret=$?
#       IFS="$si"
#       return $ret
#     fi
#     IFS="$si"
#   }
#   compctl -K _npm_completion npm
# fi
# ###-end-npm-completion-###

# Cargo completion
if [[ -x "$HOME/.cargo/env" ]]; then
  . "$HOME/.cargo/env"
fi

# Disable Clipboard GUI since it makes the Gnome active window indicator
# flicker on Wayland
# https://github.com/Slackadays/Clipboard/issues/171#issuecomment-1759936147
export CLIPBOARD_NOGUI=1
